@using Microsoft.AspNetCore.Components.Forms;
@using Microsoft.AspNetCore.Components.Web;
@using Microsoft.JSInterop;
@inject IJSRuntime jsRuntime;

<div class="container-fluid" @ref=_FileStreamUploadComponentMainElement>
    <div class="row justify-content-left">
        <div class="col col-lg p-2">
            <InputFile OnChange="HandleFileSelected" class="form-control" />
        </div>
        <div class="col-sm-auto p-2 d-flex justify-content-center">
            <button class="btn btn-primary" @onclick="OnClickCallback">@ButtonText</button>
        </div>
    </div>
    <LoadingOverlayComponent @ref=_LoadingOverlayComponent />
</div>

@code {
    [Parameter]
    public string ButtonText { get; set; } = "Upload File";
    [Parameter]
    public bool ShowLoadingOverlay { get; set; } = true;
    [Parameter]
    public EventCallback<MouseEventArgs> OnClickCallback { get; set; }

    public MemoryStream MemoryStream { get; set; }
    public string ImageDataURL = "./icon-192.png";

    private LoadingOverlayComponent _LoadingOverlayComponent { get; set; }
    private ElementReference _FileStreamUploadComponentMainElement { get; set; }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            // This JS method can be found in the ComponentMethods.js file
            //jsRuntime.InvokeVoidAsync("focusOnElement", InputToFocus);
        }
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs eventArgs)
    {
        int MAXALLOWEDFILESIZE = 30000000; // 30 Megabytes
        IBrowserFile _SelectedFile;
        // For Multiple Files
        // IReadOnlyList<IBrowserFile> _SelectedFiles;


        try
        {
            _SelectedFile = eventArgs.File;

            // For Multiple Files
            // const int MaxAllowedFiles = 5;
            // _SelectedFiles = eventArgs.GetMultipleFiles(MaxAllowedFiles);


            // Leave this code in case I want to use the FileStream
            // await using FileStream fileStream = new("testimage.png", FileMode.Create);
            // await _SelectedFiles[0].OpenReadStream().CopyToAsync(fileStream);
            await using MemoryStream memoryStream = new MemoryStream();
            await _SelectedFile.OpenReadStream(MAXALLOWEDFILESIZE).CopyToAsync(memoryStream);
            //await jsRuntime.InvokeVoidAsync("setElementTextByID", "answerSpan", "");

            MemoryStream = memoryStream;
        }
        catch (Exception exception)
        {
            // File is too big is the usual issue
        }
    }

    public async Task<string> LoadFileOnScreen()
    {
        try
        {
            if (MemoryStream != null)
            {
                if (ShowLoadingOverlay)
                    await _LoadingOverlayComponent.ShowLoadingOverlay(_FileStreamUploadComponentMainElement);
                
                string imageSource = Convert.ToBase64String(MemoryStream.ToArray());
                ImageDataURL = string.Format("data:image/png;base64,{0}", imageSource);
                Thread.Sleep(3000);

            }
        }
        catch (Exception exception)
        {

        }
        finally
        {
            if (MemoryStream != null)
            {
                MemoryStream.Flush();
            }

            if (ShowLoadingOverlay)
                await _LoadingOverlayComponent.HideLoadingOverlay(_FileStreamUploadComponentMainElement);
        }

        return ImageDataURL;
    }
}